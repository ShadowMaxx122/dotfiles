#+TITLE: Emacs & EXWM Configuration
#+PROPERTY: header-args:emacs-lisp :tangle config.el 

Here is the Module List
[[~/.config/emacs/modules/crafted-defaults.el][crafted-defaults]]
[[~/.config/emacs/modules/crafted-ui.el][crafted-ui]]
[[~/.config/emacs/modules/crafted-evil.el][crafted-evil]]
[[~/.config/emacs/modules/crafted-org.el][crafted-org]]
[[~/.config/emacs/modules/crafted-editing.el][crafted-editing]]
[[~/.config/emacs/modules/crafted-workspaces.el][crafted-workspaces]]
[[~/.config/emacs/modules/crafted-completion.el][crafted-completions]]
[[~/.config/emacs/modules/crafted-startup.el][crafted-startup]]
[[~/.config/emacs/modules/crafted-compile.el][crafted-compile]]
[[~/.config/emacs/modules/crafted-erlang.el][crafted-erlang]]
[[~/.config/emacs/modules/crafted-ide.el][crafted-ide]]
[[~/.config/emacs/modules/crafted-latex.el][crafted-latex]]
[[~/.config/emacs/modules/crafted-lisp.el][crafted-lisp]]
[[~/.config/emacs/modules/crafted-mastering-emacs.el][crafted-mastering-emacs]]
[[~/.config/emacs/modules/crafted-osx.el][crafted-osx]]
[[~/.config/emacs/modules/crafted-pdf-reader.el][crafted-pdf-reader]]
[[~/.config/emacs/modules/crafted-project.el][crafted-project]]
[[~/.config/emacs/modules/crafted-python.el][crafted-python]]
[[~/.config/emacs/modules/crafted-screencast.el][crafted-screencast]]
[[~/.config/emacs/modules/crafted-speedbar.el][crafted-speedbar]]
[[~/.config/emacs/modules/crafted-updates.el][crafted-updates]]
[[~/.config/emacs/modules/crafted-windows.el][crafted-windows]]

#+begin_src emacs-lisp
  ;; This config is managed via org file. Edit that file instead.
#+end_src

* ERC Config

#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "shadowmaxx122"    ; Change this!
        erc-user-full-name "Jacob"  ; And this!
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
        erc-kill-buffer-on-part t
        erc-auto-query 'bury)
#+end_src

* Aggressive Indent

#+begin_src emacs-lisp
  (crafted-package-install-package 'aggressive-indent)
  (global-aggressive-indent-mode 1)
#+end_src

* Bind-Key

#+begin_src emacs-lisp
#+end_src

* Use Package Setup

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

* Core Settings

Initial Setup for defaults and keybind to launch eshell.

#+begin_src emacs-lisp
  (require 'crafted-defaults)
  (require 'crafted-pdf-reader)
  (require 'crafted-speedbar)
  (require 'crafted-lisp)
  (require 'crafted-startup)
(require 'org)
  ;;(unbind-key "C-," org-mode-map)
  ;;(unbind-key "C-'" org-mode-map)


  (crafted-package-install-package 'vterm)
  (crafted-package-install-package 'xterm-color)

  (setq vterm-max-scrollback 10000)

  ;; (setup (:pkg exec-path-from-shell)
  ;;        (setq exec-path-from-shell-check-startup-files nil)
  ;;        (when (memq window-system '(mac ns x))
  ;;          (exec-path-from-shell-initialize)))
#+end_src
  
* User Interface

Setup for Icons, Fonts, Themes, and Modeline.

#+begin_src emacs-lisp
  (require 'crafted-ui)

  (crafted-package-install-package 'emojify)
  (crafted-package-install-package 'all-the-icons)
  (crafted-package-install-package 'unicode-fonts)
  (crafted-package-install-package 'which-key)
  (which-key-mode)

  ;; Install minions
  (crafted-package-install-package 'minions)
  (add-hook 'doom-modeline-mode-hook 'minions-mode)

  ;; Install doom-themes and set the theme
  (crafted-package-install-package 'doom-themes)
  (disable-theme 'deeper-blue)
  (load-theme 'doom-palenight t)

  (custom-set-faces '(mode-line ((t (:height 150))))
                    '(mode-line-inactive ((t (:height 150)))))

  ;; Set configuration variables
  (custom-set-variables '(crafted-ui-display-line-numbers t)
                        '(doom-modeline-height 35))
#+end_src

* Evil Mode

Setup ~evil-mode~ and set keybind for toggling comments.

#+begin_src emacs-lisp
  (require 'crafted-evil)

  ;; Set configuration variables
  (custom-set-variables '(crafted-evil-discourage-arrow-keys t)
                        '(evil-want-C-u-scroll t))

  ;; Set preferred key bindings
  (global-set-key (kbd "M-/") 'evilnc-comment-or-uncomment-lines)
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

* Completions and Actions

Setup ~vertico~ keybinds and quick buffer switcher.

#+begin_src emacs-lisp
  (require 'crafted-completion)

  (define-key vertico-map (kbd "C-f") 'vertico-exit)
  (define-key minibuffer-local-map (kbd "C-d") 'embark-act)
  (define-key project-prefix-map (kbd "g") 'consult-ripgrep)

  (global-set-key (kbd "C-M-j") 'consult-buffer)
#+end_src

* Project Management (Magit)

Setup ~magit~ and other project related packages.

#+begin_src emacs-lisp
  (require 'crafted-project)

  ;;; Source Control

  (crafted-package-install-package 'magit)

  (global-set-key (kbd "C-M-;") #'magit-status)
#+end_src

* IDE

Setup IDE basics and install packages for editing typescript and lisp.

#+begin_src emacs-lisp
  (require 'crafted-ide)

  (crafted-package-install-package 'typescript-mode)

  ;;; Lisp Editing

  (require 'crafted-lisp)
#+end_src

* Editing

Setup packages for editing, including ~web-mode~

#+begin_src emacs-lisp
  (require 'crafted-editing)
  (crafted-package-install-package 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (eval-after-load "web-mode"
    '(setq web-mode-tag-auto-close-style 1))
#+end_src

* Org Mode

** Basic Setup

#+begin_src emacs-lisp
  (require 'crafted-org)

  (with-eval-after-load 'org
    (require 'tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    (unbind-key "C-," org-mode-map)
    (unbind-key "C-'" org-mode-map))

  ;; (require 'org-bullets
  ;;   :hook (org-mode . org-bullets-mode)
  ;;   :custom
  ;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (crafted-package-install-package 'org-auto-tangle)
  (add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

** Bullets

#+begin_src emacs-lisp
  (crafted-package-install-package 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-startup-indented t)           ;; Indent according to section
  (setq org-startup-with-inline-images t) ;; Display images in-buffer by default
#+end_src

* Avy

#+begin_src emacs-lisp
  (crafted-package-install-package 'avy)
  ;; (global-set-key (kbd "C-:") nil)
  ;; (global-set-key (kbd "C-:") 'avy-goto-char-2)
  ;; (global-set-key (kbd "M-g f") 'avy-goto-line)
  ;;   (avy-setup-default)
  ;;   (global-set-key (kbd "C-c C-j") 'avy-resume)
  ;;   (global-set-key (kbd "C-:") 'avy-goto-char-2)
  ;;   (global-set-key (kbd "M-g e") 'avy-goto-word-0)
  ;; (setq avy-case-fold-search nil)       ;; case sensitive makes selection easier
  (bind-key "C-;"    'avy-goto-char-2)  ;; I use this most frequently
  (bind-key "C-'"    'avy-goto-line)    ;; Consistent with ivy-avy
  (bind-key "M-g c"  'avy-goto-char)
  (bind-key "M-g e"  'avy-goto-word-0)  ;; lots of candidates
  (bind-key "M-g g"  'avy-goto-line)    ;; digits behave like goto-line
  (bind-key "M-g w"  'avy-goto-word-1)  ;; first character of the word
  (bind-key "M-g ("  'avy-goto-open-paren)
  (bind-key "M-g )"  'avy-goto-close-paren)
  (bind-key "M-g P"  'avy-pop-mark)
#+end_src

